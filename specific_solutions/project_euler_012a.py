"""The sequence of triangle numbers is generated by adding the natural numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

import time
t1 = time.time()

def triangle(n):
    return ((n + 1) * n) / 2

def is_factor(n, k):
    b = 0
    divided = n
    if divided % k != 0:
        return
    else:
        while divided % k == 0:
            divided = divided / k
            b = b + 1
        return [divided, k, b]
    
def factorize(n):
    factor_list = []
    remains = n
    result = []
    k = 2
    while k <= remains:
        if remains == 1:
            return factor_list
        result = is_factor(remains, k)
        if result is not None:
            remains = result[0]
            del result[0]        
            factor_list.append(result)
        elif k > remains:
            return factor_list
        if k == 2:
            k = k + 1
        else:
            k = k + 2
    if factor_list == []:
        factor_list = ['prime']
    return factor_list

def factor_count(n):
    factors = 1
    for prime_power in factorize(n):
        factors = factors * (int(prime_power[1]) + 1)
    return factors

threshold = 500
seed = 2
while factor_count(triangle(seed)) <= threshold:
    #print seed, "\t", triangle(seed), "\t", factor_count(triangle(seed))
    seed = seed + 1
print seed, "\t", triangle(seed), "\t", factor_count(triangle(seed))

print time.time() - t1
